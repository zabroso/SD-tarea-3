// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: nodo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NodoService_SendBall_FullMethodName = "/proto.NodoService/SendBall"
)

// NodoServiceClient is the client API for NodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodoServiceClient interface {
	SendBall(ctx context.Context, in *BallRequest, opts ...grpc.CallOption) (*BallResponse, error)
}

type nodoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodoServiceClient(cc grpc.ClientConnInterface) NodoServiceClient {
	return &nodoServiceClient{cc}
}

func (c *nodoServiceClient) SendBall(ctx context.Context, in *BallRequest, opts ...grpc.CallOption) (*BallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BallResponse)
	err := c.cc.Invoke(ctx, NodoService_SendBall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodoServiceServer is the server API for NodoService service.
// All implementations must embed UnimplementedNodoServiceServer
// for forward compatibility.
type NodoServiceServer interface {
	SendBall(context.Context, *BallRequest) (*BallResponse, error)
	mustEmbedUnimplementedNodoServiceServer()
}

// UnimplementedNodoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodoServiceServer struct{}

func (UnimplementedNodoServiceServer) SendBall(context.Context, *BallRequest) (*BallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBall not implemented")
}
func (UnimplementedNodoServiceServer) mustEmbedUnimplementedNodoServiceServer() {}
func (UnimplementedNodoServiceServer) testEmbeddedByValue()                     {}

// UnsafeNodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodoServiceServer will
// result in compilation errors.
type UnsafeNodoServiceServer interface {
	mustEmbedUnimplementedNodoServiceServer()
}

func RegisterNodoServiceServer(s grpc.ServiceRegistrar, srv NodoServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodoService_ServiceDesc, srv)
}

func _NodoService_SendBall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodoServiceServer).SendBall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodoService_SendBall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodoServiceServer).SendBall(ctx, req.(*BallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodoService_ServiceDesc is the grpc.ServiceDesc for NodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NodoService",
	HandlerType: (*NodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBall",
			Handler:    _NodoService_SendBall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodo.proto",
}

const (
	NodoHeartBeat_HeartBeat_FullMethodName = "/proto.NodoHeartBeat/HeartBeat"
)

// NodoHeartBeatClient is the client API for NodoHeartBeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodoHeartBeatClient interface {
	HeartBeat(ctx context.Context, in *BeatRequest, opts ...grpc.CallOption) (*BeatResponse, error)
}

type nodoHeartBeatClient struct {
	cc grpc.ClientConnInterface
}

func NewNodoHeartBeatClient(cc grpc.ClientConnInterface) NodoHeartBeatClient {
	return &nodoHeartBeatClient{cc}
}

func (c *nodoHeartBeatClient) HeartBeat(ctx context.Context, in *BeatRequest, opts ...grpc.CallOption) (*BeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BeatResponse)
	err := c.cc.Invoke(ctx, NodoHeartBeat_HeartBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodoHeartBeatServer is the server API for NodoHeartBeat service.
// All implementations must embed UnimplementedNodoHeartBeatServer
// for forward compatibility.
type NodoHeartBeatServer interface {
	HeartBeat(context.Context, *BeatRequest) (*BeatResponse, error)
	mustEmbedUnimplementedNodoHeartBeatServer()
}

// UnimplementedNodoHeartBeatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodoHeartBeatServer struct{}

func (UnimplementedNodoHeartBeatServer) HeartBeat(context.Context, *BeatRequest) (*BeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedNodoHeartBeatServer) mustEmbedUnimplementedNodoHeartBeatServer() {}
func (UnimplementedNodoHeartBeatServer) testEmbeddedByValue()                       {}

// UnsafeNodoHeartBeatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodoHeartBeatServer will
// result in compilation errors.
type UnsafeNodoHeartBeatServer interface {
	mustEmbedUnimplementedNodoHeartBeatServer()
}

func RegisterNodoHeartBeatServer(s grpc.ServiceRegistrar, srv NodoHeartBeatServer) {
	// If the following call pancis, it indicates UnimplementedNodoHeartBeatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodoHeartBeat_ServiceDesc, srv)
}

func _NodoHeartBeat_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodoHeartBeatServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodoHeartBeat_HeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodoHeartBeatServer).HeartBeat(ctx, req.(*BeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodoHeartBeat_ServiceDesc is the grpc.ServiceDesc for NodoHeartBeat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodoHeartBeat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NodoHeartBeat",
	HandlerType: (*NodoHeartBeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _NodoHeartBeat_HeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodo.proto",
}
